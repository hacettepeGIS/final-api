export class GeoPoint {
    lat:any;
    lng:any;

    constructor(data:any) {
        if (!(this instanceof GeoPoint)) {
            return new GeoPoint(data);
        }

        if (arguments.length === 2) {
            data = {
                lat: arguments[0],
                lng: arguments[1],
            };
        }

        if (typeof data === 'string') {
            try {
                data = JSON.parse(data);
            } catch (err) {
                data = data.split(/,\s*/);
            }
        }
        if (Array.isArray(data)) {
            data = {
                lat: Number(data[0]),
                lng: Number(data[1]),
            };
        } else {
            data.lng = Number(data.lng);
            data.lat = Number(data.lat);
        }

        this.lat = data.lat;
        this.lng = data.lng;
    }

    distanceBetween(a:any, b:any, options:any) {
        if (!(a instanceof GeoPoint)) {
            a = new GeoPoint(a);
        }
        if (!(b instanceof GeoPoint)) {
            b = new GeoPoint(b);
        }

        const x1 = a.lat;
        const y1 = a.lng;

        const x2 = b.lat;
        const y2 = b.lng;

        return this.geoDistance(x1, y1, x2, y2, options);
    };

    distanceTo(point:any, options:any) {
        return this.distanceBetween(this, point, options);
    };

    toString() {
        return this.lat + ',' + this.lng;
    };

    // factor to convert degrees to radians
    DEG2RAD = 0.01745329252;

    // factor to convert radians degrees to degrees
    RAD2DEG = 57.29577951308;

    // radius of the earth
    EARTH_RADIUS = {
        kilometers: 6370.99056,
        meters: 6370990.56,
        miles: 3958.75,
        feet: 20902200,
        radians: 1,
        degrees: this.RAD2DEG,
    };

    geoDistance(x1:number, y1:number, x2:number, y2:number, options:any) {
        let radius = this.EARTH_RADIUS.miles;
        if(options && options.type)
        {
            if(options.type=='kilometers')
                radius = this.EARTH_RADIUS.kilometers;
            else if(options.type=='meters')
                radius = this.EARTH_RADIUS.meters;
            else if(options.type=='miles')
                radius = this.EARTH_RADIUS.miles;
            else if(options.type=='feet')
                radius = this.EARTH_RADIUS.feet;
            else if(options.type=='radians')
                radius = this.EARTH_RADIUS.radians;
            else if(options.type=='degrees')
                radius = this.EARTH_RADIUS.degrees; 
        }

        // Convert to radians
        x1 = x1 * this.DEG2RAD;
        y1 = y1 * this.DEG2RAD;
        x2 = x2 * this.DEG2RAD;
        y2 = y2 * this.DEG2RAD;
   
        const f = Math.sqrt(this.haversine(x2 - x1) + Math.cos(x2) * Math.cos(x1) * this.haversine(y2 - y1));

        return 2 * Math.asin(f) * radius;
    }

    // use the haversine formula to calculate distance for any 2 points on a sphere.
    // ref http://en.wikipedia.org/wiki/Haversine_formula
    haversine(a:number) {
        return Math.pow(Math.sin(a / 2.0), 2);
    };
}